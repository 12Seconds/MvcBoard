@model MvcBoardAdmin.Controllers.Response.BoardDetailResponse;

@{
    // 부모 카테고리 드롭 박스 옵션
    List<SelectListItem> CategoryOptions = new List<SelectListItem>();

    if (Model.ResultCode == 200)
    {
        // 기본값
        CategoryOptions.Add(new SelectListItem { Text = "(없음)", Value = "0", Selected = (Model.ViewModel.Board.ParentCategory == 0) });

        foreach(var parent in Model.ViewModel.Parents)
        {
            CategoryOptions.Add(new SelectListItem { Text = parent.BoardName, Value = (parent.Category).ToString(), Selected = (parent.Category == Model.ViewModel.Board.ParentCategory) });
        }
    }

    string Action = (Model.ViewModel.IsNew ? "Create" : "Update");

    // 아이콘 종류 드롭 박스 옵션 TODO 서버에서 보내줄 것
    List<SelectListItem> IconOptions = new List<SelectListItem>();
    IconOptions.Add(new SelectListItem { Text = "기본", Value = "1", Selected = (Model.ViewModel.Board.IconType <= 1) });
    IconOptions.Add(new SelectListItem { Text = "하트 모양", Value = "2", Selected = (Model.ViewModel.Board.IconType == 2) });
    IconOptions.Add(new SelectListItem { Text = "핀 모양", Value = "3", Selected = (Model.ViewModel.Board.IconType == 3) });
    IconOptions.Add(new SelectListItem { Text = "사람 모양", Value = "4", Selected = (Model.ViewModel.Board.IconType == 4) });
    IconOptions.Add(new SelectListItem { Text = "말풍선 모양", Value = "5", Selected = (Model.ViewModel.Board.IconType == 5) });
    IconOptions.Add(new SelectListItem { Text = "음표 모양", Value = "6", Selected = (Model.ViewModel.Board.IconType == 6) });
}

<div id="board_editor" class="board_editor @(Model.ViewModel.IsNew ? "new" : "") @(Model.ViewModel.Board.IsDeleted ? "deleted" : "")">
    
    @if (Model.ResultCode == 200)
    {
        @using (Html.AjaxBeginForm(Action, "Board", new AjaxOptions { HttpMethod = "Post", OnComplete = "OnUpdateResponse" }, new { @id = "UpdateBoardForm", @class = "update_board_form" }))
        {
            <div class="detail_row">
                <label>고유 번호</label>
                @Html.TextBox("BoardId", Model.ViewModel.Board.BoardId, new { @class = "text_input", @autoComplete = "off", @readonly = "readonly" }) @* TODO disabled 라서 값이 0으로 넘어가나 보다 *@
            </div>
               
            <div class="detail_row">
                <label>게시판 이름</label>
                @Html.TextBox("BoardName", Model.ViewModel.Board.BoardName, new { @class = "text_input", @autoComplete = "off"})
            </div>

            <div class="detail_row">
                <label>부모 게시판 여부</label>
                @Html.CheckBox("IsParent", Model.ViewModel.Board.IsParent, new { @class = "text_input checkbox" })
            </div>

            <div class="detail_row">
                <label>부모 카테고리 번호</label>
                @Html.DropDownList("ParentCategory", CategoryOptions, new { @class = "auth_drop"})
                @* TODO Question 드롭다운 리스트를 통해 선택되지 않은 값이 액션메소드로 전달되는 경우 기본값이 들어가도 ModelState 에서 invalid 처리..*@
            </div>

            <div class="detail_row">
                <label>카테고리 번호</label>
                @Html.TextBox("Category", Model.ViewModel.Board.Category, new { @class = "text_input", @autoComplete = "off" })
                @if (!Model.ViewModel.IsNew)
                {
                    @Html.Hidden("PrevCategory", Model.ViewModel.Board.Category, new { @class = "text_input", @autoComplete = "off" })
                }
            </div>

            @* TODO 드롭박스 *@
            <div class="detail_row">
                <label>아이콘 이미지</label>
                @Html.DropDownList("IconType", IconOptions, new { @class = "auth_drop" })
            </div>

            <div class="detail_row">
                <label>노출 순서</label>
                @Html.TextBox("ShowOrder", Model.ViewModel.Board.ShowOrder, new { @class = "text_input", @autoComplete = "off" })
            </div>

            <div class="detail_row">
                <label>게시물 작성 가능 </label>
                @Html.CheckBox("IsWritable", Model.ViewModel.Board.IsWritable, new {@class = "text_input checkbox"})
            </div>

            // TODO 변경한 값이 없는 경우 submit 요청 보내지 않는 처리
            <div class="buttton_list">
                <button type="submit" class="btn btn-outline-secondary btn-sm">@(Model.ViewModel.IsNew ? "생성" : "저장")</button>
                <button type="button" onclick="boardEditorExit()" class="btn btn-outline-secondary btn-sm">닫기</button>
                <button type="button" onclick="DeleteBoard(@Model.ViewModel.Board.BoardId)" class="btn btn-outline-danger btn-sm">삭제</button>
            </div>
        }

        @* 삭제용 *@
        @using (Html.AjaxBeginForm("Delete", "Board", new AjaxOptions { HttpMethod = "Post", OnComplete = "OnUpdateResponse" }, new { id = "DeleteBoardForm" }))
        {
            @Html.Hidden("BoardId", Model.ViewModel.Board.BoardId, new { id = "delete_boardId_val" });
        }
    }
</div>

<script>

    /* 최초 생성 시 ResultCode 에 따른 처리 */
    (function () {
        var msg = @Html.Raw(Json.Serialize(Model.Message)); // Message 또는 ErrorMessage(Array) 출력
        if (@Model.ResultCode != 200) {
            showAlert(msg, true);
        }
    })();

    /* PartialView 닫기 */
    function boardEditorExit() {
        $("#board_editor").remove();
        $("#board_nav_container").hide();
    }

    /* 게시판 삭제 요청 */
    function DeleteBoard(boardId) {
        console.log("## _BoardEditor >> DeleteBoard() boardId: ", boardId); // 확인용
        if (confirm("해당 게시판을 정말 삭제하시겠습니까?")) {
            $('#DeleteBoardForm').submit();
        }
    }

    /* 게시판 생성 or 수정 or 삭제 요청 응답 핸들러 */
    function OnUpdateResponse(xhr, status) {
        // if (xhr.status === 200) {} 항상 return OK 로 반환

        var response = JSON.parse(xhr.responseText);
        console.log("## _BoardEditor >> OnUpdateResponse() response: ", response);

        /*
            TODO 필요에 따라 가공, 수정하여 사용
            response.message -> string
            response.errorFields -> string array
            response.errorMessages -> string array
            response.errorSummary -> string
        */
        var AllMessages = ""; // 편의상 모두 노출

        AllMessages += response.message + "\n";
        for (var i = 0; i < response.errorMessages.length; i++)
        {
            AllMessages += response.errorMessages[i] + "\n";
        }

        switch (response.resultCode) {
            // 성공
            case 200: {
                boardEditorExit();
                updatePage();
                break;
            }
            // 입력값 오류 (ModelState 참고하여 처리 필요)
            case 201: {
                showAlert(AllMessages, false);
                break;
            }
            default: {
                showAlert(AllMessages, false);
                break;
            } 
        }
    }
    
</script>